<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
   xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
   xmlns:aop="http://www.springframework.org/schema/aop"
   xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans.xsd
      http://www.springframework.org/schema/aop http://www.springframework.org/schema/aop/spring-aop-3.1.xsd">
        
        <!-- Spring AOP -->
        
        <!-- 주 업무 객체 -->
        <bean id="memo" class="com.test.spring.aop.MemoImpl"></bean>
        
        <!-- 보조 업무 객체 -->
        <bean id="logger" class="com.test.spring.aop.Logger"></bean>
        
        <!-- 주 업무 객체 + 보조 업무 객체 -->
        <!-- Spring AOP 설정 -->
        <aop:config>
        
        	<!-- 보조 업무를 담당할 객체 지정 : 역할(Role)-->
        	<aop:aspect id="loggerAdvice" ref="logger">
        	
        		<!-- 주 업무 객체를 지정 > 각 메서드 찾기 > 포인트컷 지정 -->
        		<!-- Point Cut : 주 업무 객체의 특정 메서드 -->
        		<!-- Point Cut 지정 방법 : Aspectj 표현식을 사용한다. -->
        		
        		<!-- 포인트컷 지정(= 주 업무 지정) -->
        		
        		<!-- 
        		
        			AspectJ 표현식
        			- execution([접근지정자] 반환형 [클래스].메서드(인자))
        			
        			- 접근 지정자 > 생략 가능(public만 가능)
        			- 반환형 > 생략 불가능
        			- 클래스 > 반드시 전체 경로 표현, 생략 가능
        			- 메서드 > 메서드 명, 생략 불가능
        			- 인자 > 인자 리스트, 생략 불가능
        			- 와일드 카드
        				1. *
        				2. ..
        		 -->
        		
        		<!--
        			각 메서드를 포인트 컷으로 설정
        		 
	        		<aop:pointcut expression="execution(public void com.test.spring.aop.MemoImpl.add(String))" id="p1"/>
	        		
	        		<aop:pointcut expression="execution(public String com.test.spring.aop.MemoImpl.read(int))" id="p2"></aop:pointcut>
	        		
	        		<aop:pointcut expression="execution(public boolean com.test.spring.aop.MemoImpl.edit(int, String))" id="p3"></aop:pointcut>
        		
        		 -->
        		 
        		 <!-- 한 클래스 내 모든 메서드를 포인트컷으로 지정(와일드 카드 사용)-->
        		 <aop:pointcut expression="execution(public * com.test.spring.aop.MemoImpl.*(..))" id="p4" />
        		 
        		 <aop:pointcut expression="execution(* *(..))" id="p5"/>
        		 
        		 <aop:pointcut expression="execution(public * com.test.spring.aop.MemoImpl.*(int,..))" id="p6"/>
        		 
        		 <aop:pointcut expression="execution(public * com.test.spring.aop.MemoImpl.add*(..))" id="p7"/>
        		 
        		
        		<!-- 위빙(Weaving) > 포인트컷과 보조 업무 결합 > 5가지의 방법 > n:n의 관계 -->
        		
        		<!-- After Advice : 주 업무 실행 후 보조 업무 실행 -->
        		
        		<!-- 
	        		<aop:after method="log" pointcut-ref="p1" />
	        		<aop:after method="log" pointcut-ref="p2" />
	        		<aop:after method="log" pointcut-ref="p3" />
        		 -->
        		
        		<!--  
	        		<aop:after method="log" pointcut-ref="p4" />
	        		<aop:before method="log" pointcut-ref="p4" />
	        		<aop:around method="time" pointcut-ref="p5" />
        		 -->
        		 
        		 <!-- <aop:after-returning method="history" pointcut-ref="p5" returning="memo"/> -->
        		 <aop:after-throwing method="check" pointcut-ref="p5" throwing="e" />
        		 
        		 
        	</aop:aspect>
        </aop:config>
        
</beans>